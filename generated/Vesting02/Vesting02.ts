// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class EBoost extends ethereum.Event {
  get params(): EBoost__Params {
    return new EBoost__Params(this);
  }
}

export class EBoost__Params {
  _event: EBoost;

  constructor(event: EBoost) {
    this._event = event;
  }

  get vestID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vestAmountPerStablecoinPerSecond(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ECreateVest extends ethereum.Event {
  get params(): ECreateVest__Params {
    return new ECreateVest__Params(this);
  }
}

export class ECreateVest__Params {
  _event: ECreateVest;

  constructor(event: ECreateVest) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get depositID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get vestID(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get vestAmountPerStablecoinPerSecond(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ESetMPHMinter extends ethereum.Event {
  get params(): ESetMPHMinter__Params {
    return new ESetMPHMinter__Params(this);
  }
}

export class ESetMPHMinter__Params {
  _event: ESetMPHMinter;

  constructor(event: ESetMPHMinter) {
    this._event = event;
  }

  get newValue(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EUpdateVest extends ethereum.Event {
  get params(): EUpdateVest__Params {
    return new EUpdateVest__Params(this);
  }
}

export class EUpdateVest__Params {
  _event: EUpdateVest;

  constructor(event: EUpdateVest) {
    this._event = event;
  }

  get vestID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get depositID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currentDepositAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get vestAmountPerStablecoinPerSecond(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class EWithdraw extends ethereum.Event {
  get params(): EWithdraw__Params {
    return new EWithdraw__Params(this);
  }
}

export class EWithdraw__Params {
  _event: EWithdraw;

  constructor(event: EWithdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vestID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get withdrawnAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Vesting02__getVestResultValue0Struct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get depositID(): BigInt {
    return this[1].toBigInt();
  }

  get lastUpdateTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get accumulatedAmount(): BigInt {
    return this[3].toBigInt();
  }

  get withdrawnAmount(): BigInt {
    return this[4].toBigInt();
  }

  get vestAmountPerStablecoinPerSecond(): BigInt {
    return this[5].toBigInt();
  }
}

export class Vesting02__vestListResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Vesting02 extends ethereum.SmartContract {
  static bind(address: Address): Vesting02 {
    return new Vesting02("Vesting02", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  createVestForDeposit(
    to: Address,
    pool: Address,
    depositID: BigInt,
    vestAmountPerStablecoinPerSecond: BigInt
  ): BigInt {
    let result = super.call(
      "createVestForDeposit",
      "createVestForDeposit(address,address,uint64,uint256):(uint64)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(vestAmountPerStablecoinPerSecond)
      ]
    );

    return result[0].toBigInt();
  }

  try_createVestForDeposit(
    to: Address,
    pool: Address,
    depositID: BigInt,
    vestAmountPerStablecoinPerSecond: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createVestForDeposit",
      "createVestForDeposit(address,address,uint64,uint256):(uint64)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromUnsignedBigInt(depositID),
        ethereum.Value.fromUnsignedBigInt(vestAmountPerStablecoinPerSecond)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositIDToVestID(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "depositIDToVestID",
      "depositIDToVestID(address,uint64):(uint64)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositIDToVestID(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositIDToVestID",
      "depositIDToVestID(address,uint64):(uint64)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVest(vestID: BigInt): Vesting02__getVestResultValue0Struct {
    let result = super.call(
      "getVest",
      "getVest(uint64):((address,uint64,uint64,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(vestID)]
    );

    return changetype<Vesting02__getVestResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getVest(
    vestID: BigInt
  ): ethereum.CallResult<Vesting02__getVestResultValue0Struct> {
    let result = super.tryCall(
      "getVest",
      "getVest(uint64):((address,uint64,uint64,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(vestID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vesting02__getVestResultValue0Struct>(value[0].toTuple())
    );
  }

  getVestWithdrawableAmount(vestID: BigInt): BigInt {
    let result = super.call(
      "getVestWithdrawableAmount",
      "getVestWithdrawableAmount(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vestID)]
    );

    return result[0].toBigInt();
  }

  try_getVestWithdrawableAmount(vestID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVestWithdrawableAmount",
      "getVestWithdrawableAmount(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vestID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mphMinter(): Address {
    let result = super.call("mphMinter", "mphMinter():(address)", []);

    return result[0].toAddress();
  }

  try_mphMinter(): ethereum.CallResult<Address> {
    let result = super.tryCall("mphMinter", "mphMinter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  numVests(): BigInt {
    let result = super.call("numVests", "numVests():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numVests(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numVests", "numVests():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  vestList(param0: BigInt): Vesting02__vestListResult {
    let result = super.call(
      "vestList",
      "vestList(uint256):(address,uint64,uint64,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Vesting02__vestListResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_vestList(param0: BigInt): ethereum.CallResult<Vesting02__vestListResult> {
    let result = super.tryCall(
      "vestList",
      "vestList(uint256):(address,uint64,uint64,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vesting02__vestListResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  withdraw(vestID: BigInt): BigInt {
    let result = super.call("withdraw", "withdraw(uint64):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vestID)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(vestID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdraw", "withdraw(uint64):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vestID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BoostCall extends ethereum.Call {
  get inputs(): BoostCall__Inputs {
    return new BoostCall__Inputs(this);
  }

  get outputs(): BoostCall__Outputs {
    return new BoostCall__Outputs(this);
  }
}

export class BoostCall__Inputs {
  _call: BoostCall;

  constructor(call: BoostCall) {
    this._call = call;
  }

  get vestID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get vestAmountPerStablecoinPerSecond(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BoostCall__Outputs {
  _call: BoostCall;

  constructor(call: BoostCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class CreateVestForDepositCall extends ethereum.Call {
  get inputs(): CreateVestForDepositCall__Inputs {
    return new CreateVestForDepositCall__Inputs(this);
  }

  get outputs(): CreateVestForDepositCall__Outputs {
    return new CreateVestForDepositCall__Outputs(this);
  }
}

export class CreateVestForDepositCall__Inputs {
  _call: CreateVestForDepositCall;

  constructor(call: CreateVestForDepositCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get depositID(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get vestAmountPerStablecoinPerSecond(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateVestForDepositCall__Outputs {
  _call: CreateVestForDepositCall;

  constructor(call: CreateVestForDepositCall) {
    this._call = call;
  }

  get vestID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MultiWithdrawCall extends ethereum.Call {
  get inputs(): MultiWithdrawCall__Inputs {
    return new MultiWithdrawCall__Inputs(this);
  }

  get outputs(): MultiWithdrawCall__Outputs {
    return new MultiWithdrawCall__Outputs(this);
  }
}

export class MultiWithdrawCall__Inputs {
  _call: MultiWithdrawCall;

  constructor(call: MultiWithdrawCall) {
    this._call = call;
  }

  get vestIDList(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class MultiWithdrawCall__Outputs {
  _call: MultiWithdrawCall;

  constructor(call: MultiWithdrawCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get newURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get newURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetMPHMinterCall extends ethereum.Call {
  get inputs(): SetMPHMinterCall__Inputs {
    return new SetMPHMinterCall__Inputs(this);
  }

  get outputs(): SetMPHMinterCall__Outputs {
    return new SetMPHMinterCall__Outputs(this);
  }
}

export class SetMPHMinterCall__Inputs {
  _call: SetMPHMinterCall;

  constructor(call: SetMPHMinterCall) {
    this._call = call;
  }

  get newValue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMPHMinterCall__Outputs {
  _call: SetMPHMinterCall;

  constructor(call: SetMPHMinterCall) {
    this._call = call;
  }
}

export class SetTokenURICall extends ethereum.Call {
  get inputs(): SetTokenURICall__Inputs {
    return new SetTokenURICall__Inputs(this);
  }

  get outputs(): SetTokenURICall__Outputs {
    return new SetTokenURICall__Outputs(this);
  }
}

export class SetTokenURICall__Inputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTokenURICall__Outputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get direct(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get renounce(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateVestForDepositCall extends ethereum.Call {
  get inputs(): UpdateVestForDepositCall__Inputs {
    return new UpdateVestForDepositCall__Inputs(this);
  }

  get outputs(): UpdateVestForDepositCall__Outputs {
    return new UpdateVestForDepositCall__Outputs(this);
  }
}

export class UpdateVestForDepositCall__Inputs {
  _call: UpdateVestForDepositCall;

  constructor(call: UpdateVestForDepositCall) {
    this._call = call;
  }

  get poolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get depositID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get currentDepositAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get vestAmountPerStablecoinPerSecond(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateVestForDepositCall__Outputs {
  _call: UpdateVestForDepositCall;

  constructor(call: UpdateVestForDepositCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get vestID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get withdrawnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
